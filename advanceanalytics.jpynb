import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_csv("USvideos.csv")


# Handle missing values (if any)
df.fillna(0, inplace=True)

# Feature Engineering: Select features and target variable
# Let's use 'likes', 'dislikes', 'comment_count' as features to predict 'views'
X = df[['likes', 'dislikes', 'comment_count']]  # Features (independent variables)
y = df['views']  # Target variable (dependent variable)

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Supervised Learning: Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"RÂ² Score: {r2}")

# Visualize the true vs predicted values for 'views'
plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred, color="#268bd2", edgecolors="black", linewidths=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', lw=2)  # Line showing perfect predictions
plt.title("True vs Predicted Views", fontsize=16)
plt.xlabel("True Views")
plt.ylabel("Predicted Views")
plt.grid(True)
plt.show()

# Feature importance analysis (to see which feature has more influence)
feature_importances = model.feature_importances_
features = X.columns

# Plot the feature importances
plt.figure(figsize=(8,5))
sns.barplot(x=feature_importances, y=features, palette="Blues_d")
plt.title("Feature Importance for Predicting Views", fontsize=16)
plt.show()
